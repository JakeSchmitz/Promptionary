name: Deploy Backend to GKE

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GKE_CLUSTER: promptionary-gke
      GKE_ZONE: us-central1-a
      IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/promptionary-backend:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate to Google Cloud
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/service-account-key.json
          gcloud auth activate-service-account --key-file=/tmp/service-account-key.json

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build -t $IMAGE -f apps/backend/Dockerfile .

      - name: Push Docker image
        run: docker push $IMAGE

      - name: Get GKE credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

      - name: Deploy to GKE
        run: |
          # Create ConfigMap for environment variables
          kubectl create configmap promptionary-backend-config \
            --from-literal=DATABASE_URL="postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:5432/${{ secrets.DB_NAME }}" \
            --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Create or update deployment
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: promptionary-backend
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: promptionary-backend
            template:
              metadata:
                labels:
                  app: promptionary-backend
              spec:
                containers:
                - name: promptionary-backend
                  image: $IMAGE
                  ports:
                  - containerPort: 3000
                  envFrom:
                  - configMapRef:
                      name: promptionary-backend-config
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
          EOF
          
          # Create service if it doesn't exist
          kubectl expose deployment promptionary-backend --type=LoadBalancer --port=3000 --target-port=3000 || true

      - name: Run Database Migrations
        run: |
          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/promptionary-backend
          
          # Run database migrations
          kubectl exec deployment/promptionary-backend -- npx prisma migrate deploy 