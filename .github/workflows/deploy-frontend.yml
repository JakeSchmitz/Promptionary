name: Deploy Frontend to GKE

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GKE_CLUSTER: promptionary-gke-prod
      GKE_ZONE: us-central1
      IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/promptionary-frontend:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate to Google Cloud
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/service-account-key.json
          gcloud auth activate-service-account --key-file=/tmp/service-account-key.json

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          mkdir -p $HOME/.kube
          touch $HOME/.kube/config
          echo "use-gcp-auth-plugin: true" >> $HOME/.kube/config

      - name: Get GKE credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

      - name: Build Docker image
        run: |
          docker build -t $IMAGE -f apps/frontend/Dockerfile .

      - name: Push Docker image
        run: docker push $IMAGE

      - name: Deploy to GKE
        run: |
          # Create ConfigMap for environment variables
          kubectl create configmap promptionary-frontend-config \
            --from-literal=NODE_ENV="production" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Create or update deployment
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: promptionary-frontend
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: promptionary-frontend
            template:
              metadata:
                labels:
                  app: promptionary-frontend
              spec:
                containers:
                - name: promptionary-frontend
                  image: $IMAGE
                  ports:
                  - containerPort: 80
                  envFrom:
                  - configMapRef:
                      name: promptionary-frontend-config
                  resources:
                    requests:
                      memory: "64Mi"
                      cpu: "50m"
                    limits:
                      memory: "128Mi"
                      cpu: "100m"
          EOF
          
          # Create service for internal communication
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: promptionary-frontend-service
          spec:
            selector:
              app: promptionary-frontend
            ports:
            - protocol: TCP
              port: 80
              targetPort: 80
            type: NodePort
          EOF
          
          # Deploy Ingress for domain routing
          kubectl apply -f k8s/prod-ingress.yaml
          
          # Wait for Ingress to be ready
          echo "Waiting for Ingress to be ready..."
          kubectl wait --for=condition=ready --timeout=300s ingress/promptionary-ingress
          
          echo "Application deployed!"
          echo "Production URL: https://promptionary.ai"
          echo "Production URL (www): https://www.promptionary.ai" 