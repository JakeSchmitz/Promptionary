name: Deploy to Test Environment

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: string

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GKE_CLUSTER: promptionary-gke-test
      GKE_REGION: us-central1
      IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/promptionary-backend:test-${{ github.run_id }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate to Google Cloud
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/service-account-key.json
          gcloud auth activate-service-account --key-file=/tmp/service-account-key.json

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          mkdir -p $HOME/.kube
          touch $HOME/.kube/config
          echo "use-gcp-auth-plugin: true" >> $HOME/.kube/config

      - name: Get GKE credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_REGION

      - name: Create Cloud SQL Credentials Secret
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/service-account-key.json
          kubectl create secret generic cloudsql-instance-credentials \
            --from-file=key.json=/tmp/service-account-key.json \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create or update backend secret
        run: |
          kubectl create secret generic promptionary-backend-secret \
            --from-literal=database-url="${{ secrets.TEST_DATABASE_URL }}" \
            --from-literal=instance-connection-name="${{ secrets.TEST_INSTANCE_CONNECTION_NAME }}" \
            --from-literal=openai-api-key="${{ secrets.OPENAI_API_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Build Docker image
        run: |
          cd apps/backend
          docker build -t $IMAGE .

      - name: Push Docker image
        run: docker push $IMAGE

      - name: Deploy Backend to Test
        run: |
          # Deploy with Cloud SQL Auth Proxy
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: promptionary-backend
            labels:
              environment: test
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: promptionary-backend
            template:
              metadata:
                labels:
                  app: promptionary-backend
                  environment: test
              spec:
                containers:
                - name: promptionary-backend
                  image: $IMAGE
                  ports:
                  - containerPort: 3000
                  env:
                  - name: NODE_ENV
                    value: "production"
                  - name: PORT
                    value: "3000"
                  - name: DATABASE_URL
                    valueFrom:
                      secretKeyRef:
                        name: promptionary-backend-secret
                        key: database-url
                  - name: OPENAI_API_KEY
                    valueFrom:
                      secretKeyRef:
                        name: promptionary-backend-secret
                        key: openai-api-key
                  - name: INSTANCE_CONNECTION_NAME
                    valueFrom:
                      secretKeyRef:
                        name: promptionary-backend-secret
                        key: instance-connection-name
                  resources:
                    requests:
                      memory: "128Mi"
                      cpu: "100m"
                    limits:
                      memory: "256Mi"
                      cpu: "200m"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 3000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /ready
                      port: 3000
                    initialDelaySeconds: 5
                    periodSeconds: 5
                - name: cloud-sql-proxy
                  image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.8.1
                  command:
                  - "/cloud-sql-proxy"
                  - "$(INSTANCE_CONNECTION_NAME)"
                  - "--credentials-file=/secrets/cloudsql/key.json"
                  - "--auto-iam-authn"
                  env:
                  - name: INSTANCE_CONNECTION_NAME
                    valueFrom:
                      secretKeyRef:
                        name: promptionary-backend-secret
                        key: instance-connection-name
                  securityContext:
                    runAsNonRoot: true
                    allowPrivilegeEscalation: false
                  volumeMounts:
                  - name: cloudsql-instance-credentials
                    mountPath: /secrets/cloudsql
                    readOnly: true
                  resources:
                    requests:
                      memory: "64Mi"
                      cpu: "50m"
                    limits:
                      memory: "128Mi"
                      cpu: "100m"
                volumes:
                - name: cloudsql-instance-credentials
                  secret:
                    secretName: cloudsql-instance-credentials
          EOF
          
          # Create services
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: promptionary-backend-service
          spec:
            selector:
              app: promptionary-backend
            ports:
            - protocol: TCP
              port: 3000
              targetPort: 3000
            type: NodePort
          EOF

      - name: Run Database Migrations
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/promptionary-backend
          kubectl exec deployment/promptionary-backend -- npx prisma migrate deploy

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GKE_CLUSTER: promptionary-gke-test
      GKE_REGION: us-central1
      IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/promptionary-frontend:test-${{ github.run_id }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate to Google Cloud
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/service-account-key.json
          gcloud auth activate-service-account --key-file=/tmp/service-account-key.json

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          mkdir -p $HOME/.kube
          touch $HOME/.kube/config
          echo "use-gcp-auth-plugin: true" >> $HOME/.kube/config

      - name: Get GKE credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_REGION

      - name: Build Docker image
        run: |
          cd apps/frontend
          docker build -t $IMAGE .

      - name: Push Docker image
        run: docker push $IMAGE

      - name: Deploy Frontend to Test
        run: |
          # Create ConfigMap for environment variables
          kubectl create configmap promptionary-frontend-config \
            --from-literal=NODE_ENV="production" \
            --from-literal=ENVIRONMENT="test" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy frontend
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: promptionary-frontend
            labels:
              environment: test
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: promptionary-frontend
            template:
              metadata:
                labels:
                  app: promptionary-frontend
                  environment: test
              spec:
                containers:
                - name: promptionary-frontend
                  image: $IMAGE
                  ports:
                  - containerPort: 80
                  envFrom:
                  - configMapRef:
                      name: promptionary-frontend-config
                  resources:
                    requests:
                      memory: "64Mi"
                      cpu: "50m"
                    limits:
                      memory: "128Mi"
                      cpu: "100m"
          EOF
          
          # Create services
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: promptionary-frontend-service
          spec:
            selector:
              app: promptionary-frontend
            ports:
            - protocol: TCP
              port: 80
              targetPort: 80
            type: NodePort
          EOF
          
          # Deploy Ingress for test domain routing
          kubectl apply -f k8s/test-ingress.yaml

      - name: Get Service URLs
        run: |
          echo "Waiting for Ingress to be ready..."
          kubectl wait --for=condition=ready --timeout=300s ingress/promptionary-ingress || true
          
          echo "Test environment deployed!"
          echo "Test URL: https://test.promptionary.ai"
          echo ""
          echo "Note: SSL certificate provisioning may take up to 15 minutes."